PRISE DE NOTES SUR LES POINTS DE TERMINAISON QUE NOUS AVIONS MIS EN PLACE PENDANT LE COURS 

app.get('/', (req, res) => res.send('Hello, Express 2!'))

// //on retourne la liste des pokémons au format JSON, avec un message :
// app.get('/api/pokemons', (req, res) => {
// const message = "La liste des pokémons a bien été récupérée."
// res.json(success(message, pokemons))
// }) 

// app.get('/api/pokemons/:id', (req, res) => {
//     const id = parseInt(req.params.id)
//     const pokemon = pokemons.find(pokemon => pokemon.id === id)
//     const message = 'Un pokémon a bien été trouvé.'
//    res.json(success(message, pokemon))
// })

// app.post('/api/pokemons', (req, res) => {
//     const id = getUniqueId(pokemons)
//     const pokemonCreated = { ...req.body, ...{id: id, created: new Date()}}
//     pokemons.push(pokemonCreated)
//     const message = `le pokemon ${pokemonCreated.name} a bien été créé.`
//     res.json(success(message, pokemonCreated))
// })

// app.put('/api/pokemons/:id', (req, res) => {
//     const id = parseInt(req.params.id);
//     const pokemonUpdated = { ...req.body, id: id }
//     pokemons = pokemons.map(pokemon => {
//      return pokemon.id === id ? pokemonUpdated : pokemon
//     })
//     const message = `Le pokémon ${pokemonUpdated.name} a bien été modifié.`
//     res.json(success(message, pokemonUpdated))
//    });

//    app.delete('/api/pokemons/:id', (req, res) => {
//     const id = parseInt(req.params.id)
//     const pokemonDeleted = pokemons.find(pokemon => pokemon.id === id)
//     pokemons = pokemons.filter(pokemon => pokemon.id !== id)
//     const message = `Le pokémon ${pokemonDeleted.name} a bien été supprimé.`
//     res.json(success(message, pokemonDeleted))
//   });


PRISE DE NOTE SUR LA MISE EN PLACE DE SEQUELIZE QUE NOUS AVIONS FAITE PENDANT LE COURS

const sequelize = new Sequelize('pokedex', process.env.DB_USER, process.env.DB_PASSWORD, {
  host: 'localhost',
  dialect: 'mysql',
});

sequelize
  .authenticate()
  .then(() => {
    console.log('Connexion à la base de données établie avec succès.');
  })
  .catch(err => {
    console.error('Erreur de connexion à la base de données :', err);
  });

  const Pokemon = PokemonModel(sequelize, DataTypes)

  sequelize.sync({force: true})
  .then(_ => {
    console.log('La base de données "Pokedex" a bien été synchronisée.')
   
    pokemons.map(pokemon => {
      Pokemon.create({
        name: pokemon.name,
        hp: pokemon.hp,
        cp: pokemon.cp,
        picture: pokemon.picture,
        types: pokemon.types.join()
      }).then(bulbizarre => console.log(bulbizarre.toJSON()))
    })
  })